ADSA_MID

1.) GCD: Given two positive integers, subtract smaller number from bigger number until those two numbers are not equal

//OPTIMISED APPROACH using Euclidean algorithm:

#include <stdio.h>
int optimised_gcd(int a, int b) {
    if (a == 0 || b == 0 || a == b)
        return 0;
    if (a == 1 || b == 1)
        return (a > b) ? a : b;

    int c = 0;
    while (b != 0) {
        c = 0;
        int r = a % b;
        a = b;
        b = r;
    }
    
    return c - 1;
}

int main() {
    int a, b;
    printf("Enter the first number: ");
    scanf("%d", &a);
    printf("Enter the second number: ");
    scanf("%d", &b);
    
    int result = optimized_gcd(a, b);
    printf("The result is: %d\n", result);
    
    return 0;
}

// c-1 step always gives output -1 so here's a small modification;

#include <stdio.h>
int optimized_gcd(int a, int b) {
    if (a == 0 || b == 0 || a == b)
        return 0;
    if (a == 1 || b == 1)
        return (a > b) ? a : b;

 
    int c = 0;
    while (b != 0) {
        int r = a % b;
        a = b;
        b = r;
        c++;  // Increment the counter at each step
    }
    
    return c;  // Return the number of steps taken
}

int main() {
    int a, b;
    printf("Enter the first number: ");
    scanf("%d", &a);
    
    printf("Enter the second number: ");
    scanf("%d", &b);
    
    int result = optimized_gcd(a, b);
    printf("The result is: %d\n", result);
    
    return 0;
}

//Time Complexity: big O(log(min(a,b))) worst-case scenario (when numbers are consecutive 								      fibonacci numbers)
		 : big O(1) best-case scenario (when one number is much smaller or a divisor of 						       the other, leading to quick termination)

//BRUTE FORCE APPROACH;

#include <stdio.h>
#include <stdlib.h>
int number_of_passes(int a, int b) {
    if (a == 0 || b == 0 || a == b) {
        return 0;
    }
    if (a == 1 || b == 1) {
        return (a > b) ? a : b;
    }

    int c = 0;

    while (a != b) {
        c++;
        int d = abs(a - b);

        if (a > b) {
            if (d > b) {
                a = d;
            } else {
                a = b;
                b = d;
            }
        } else {
            if (d > a) {
                b = a;
                a = d;
            } else {
                b = d;
            }
        }
    }
    return c;
}

int main() {
    int a, b;
    printf("Enter the first number: ");
    scanf("%d", &a);
    printf("Enter the second number: ");
    scanf("%d", &b);

    int result = number_of_passes(a, b);
    printf("The number of passes until a equals b is: %d\n", result);

    return 0;
}

//Time Complexity: O(max(a, b)) in the worst case.
		 : O(1) in best case.
//brute-force approach is less efficient for large numbers.

